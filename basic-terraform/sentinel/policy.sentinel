# Import the terraform plan
import "tfplan/v2" as tfplan

# Function to check if the project is allowed for 'roles/editor'
# Returns true if the project is violating the rule
is_project_violation = func(role, project) {
  return role == "roles/editor" and project not in allowed_editor_projects
}

# Define the allowed roles for IAM bindings
allowed_roles = [
  "roles/viewer",
  "roles/editor",
  "roles/storage.admin",
  "roles/compute.admin"
]

# Define specific projects where 'roles/editor' can be applied
allowed_editor_projects = [
  "my-project-id-123",
  "test-project-id-456"
]

# Function to collect violating instances in an array
collect_violating_instances = func() {
  violations = []

  # Iterate through the resources and collect violating instances
  for tfplan.resources as resource {
    if resource.type == "google_project_iam_member" and resource.mode == "managed" {
      for resource.instances as instance {
        # If violation is found, add the instance to the violations array
        if is_project_violation(instance.attributes.role, instance.attributes.project) {
          violations.append({
            "project": instance.attributes.project,
            "role": instance.attributes.role,
            "member": instance.attributes.member
          })
        }
      }
    }
  }
  return violations
}

# Call the function and get the array of violating instances
violating_instances = collect_violating_instances()

# Rule: Ensure that there are no violating instances
restrict_editor_role_to_projects = rule {
  length(violating_instances) == 0
}

# Main rule to print violations when they occur
main = rule {
  restrict_editor_role_to_projects
} else {
  # Print the number of violations and details of each violating instance
  print("Number of violations: %d", length(violating_instances))
  print("Violating instances:")

  # Iterate over the violations array and print details
  for violating_instances as violation {
    print("Project: %s, Role: %s, Member: %s", violation.project, violation.role, violation.member)
  }

  false
}
