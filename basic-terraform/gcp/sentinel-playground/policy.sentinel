import "tfplan/v2" as tfplan

// Sentinel filter expression
machines = filter tfplan.resource_changes as _, resource_changes {
    resource_changes.address is "aws_instance.ubuntu" and
        resource_changes.mode is "managed" and
        (resource_changes.change.actions contains "create" or
            resource_changes.change.actions is ["update"])
}

// Sentinel rule 
machine_rule1 = rule {
    all machines as _, instance {
        instance.change.after.instance_type is "t2.micro"
    }
}

allowed_machine_types = [
  "t2.micro",
]

mandatory_instance_tags = rule {
    all ec2_instances as _, instance {
        all mandatory_tags as mt {
            instance.change.after.tags contains mt
        }
    }
}

# Mandatory Instance Tags
mandatory_tags = [
    "Name",
]

machine_rule4 = rule {
    all machines as _, instance {
        all mandatory_tags as mt {
            instance.change.after.tags contains mt
        }
    }
}


verify_address = func(instance, allowed_machine_types) {
  if not (instance.change.after.instance_type in allowed_machine_types ){
    print("xxx" , instance.address, "->", instance.change.after.instance_type )
  }

  return true
} 

// Sentinel rule 
machine_rule3 = rule {
    all machines as _, instance { 
      verify_address(instance, allowed_machine_types)
    }
}
// Sentinel rule 
machine_rule2 = rule {
    all machines as _, instance { 
        instance.change.after.instance_type in allowed_machine_types
        
    }
}
main = rule {
  machine_rule4 else true
}

