# This policy uses the Sentinel tfplan/v2 import to require that
# all GCE instances have machine types from an allowed list

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan


violators = {}
messages = {}

allowed_types = ["roles/cloudfunctions.invoker"]
allowed_type = "roles/cloudfunctions.invoker"
forbidden = ["allUsers"]

# Get all iam resources
all_resources = plan.find_resources("google_cloudfunctions_function_iam_member")

all_resources_with_member = plan.filter_attribute_is_value(all_resources, "role", allowed_type, false).resources

print("step 1: ", length(all_resources_with_member) )
all_resources_with_member = plan.filter_attribute_is_value(all_resources, "role", allowed_type, false).resources

print("step 2: ", length(all_resources_with_member) )
all_resources_with_member = plan.filter_attribute_is_value(all_resources, "role", allowed_types[0], false).resources

print("step 3: ", length(all_resources_with_member) )

results = plan.filter_attribute_is_value(all_resources_with_member, "member", forbidden[0], false)
print("step 4: ", length(results) )
// works with attribute values which are not lists
results = plan.filter_attribute_contains_items_from_list(all_resources_with_member, "member", forbidden, false) 

print("step 5: ", length(results) )
print("res: ", results["messages"])
violations = length(results["messages"])

# Main rule
main = rule {
	violations is 0
}
