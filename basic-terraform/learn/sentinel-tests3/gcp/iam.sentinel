# This policy uses the Sentinel tfplan/v2 import to block use of the
# forbidden CIDRs in ingress google_compute_firewall resources

# Import common-functions/tfplan-functions/tfplan-functions.sentinel
# with alias "plan"
import "tfplan-functions" as plan

# Forbidden CIDRs
forbidden_cidrs = ["0.0.0.0/0"]

# Custom function
get_resources_attribute = func(resources, attribute) {
  res = {}
  for resources as address, rc {
    v = plan.evaluate_attribute(rc, attribute) else null
    if v is null {
       v = "null"
    }
    res[address] = v 
  }
  return values(res)
}


# Get all resources of the type "module.service_account_iam_binding"

service_account_iam_member = plan.find_resources("google_service_account_iam_member")
print("step 1", keys(service_account_iam_member))

role = "roles/iam.serviceAccountTokenCreator"
# We only want the resources map from the returned map
keyadmins = plan.filter_attribute_is_value(service_account_iam_member, "role", role, false).resources


useradmins = plan.filter_attribute_matches_regex(keyadmins, "member", "user:.*", false).resources

users = ["john.doe@gmail.com", "john.doe@gmail.com", "john.doe@gmail.com", "john.doe@gmail.com", "john.doe@gmail.com", "john.doe@gmail.com", "jane@gmail.com"]

members = get_resources_attribute(useradmins, "member")
print("step 2", keys(useradmins))
violatingResources =
      plan.filter_attribute_in_list(useradmins,  "members", users, true)


print("step 3", members)
print("step 4", violatingResources)
violations = length(violatingResources["messages"])

print("step 5", violations)	
# Main rule
main = rule {
  violations is 0
}

