# Imports mock data
import "tfplan/v2" as tfplan
// https://github.com/hashicorp/terraform-sentinel-policies/blob/main/common-functions/tfplan-functions/tfplan-functions.sentinel
// import "tfplan-functions" as tfplan_functions
find_resources = func(type) {
  resources = filter tfplan.resource_changes as address, rc {
  	rc.type is type and
  	rc.mode is "managed" and
  	(rc.change.actions contains "create" or rc.change.actions contains "update" )
  }


  return resources
}

instances = find_resources("aws_instance")
# Get all AWS instances from all modules
ec2_instances = filter instances as _, rc {
    rc.type is "aws_instance" and
        (rc.change.actions contains "create" or rc.change.actions is ["update"])
}

# Mandatory Instance Tags
mandatory_tags = [
    "Name",
]

# Allowed Types
allowed_types = [
    "t2.micro",
    "t2.small",
    "t2.medium",
]

# Rule to enforce "Name" tag on all instances
mandatory_instance_tags = rule {
    all ec2_instances as _, instance {
        all mandatory_tags as mt {
            instance.change.after.tags contains mt
        }
    }
}
violatingResources = filter instances as _, instance {
      not ( instance.change.after.instance_type  in allowed_types)
}

mandatory_instance_tags2 = rule {
// NOTE: cannot "if" here:
// expected operand, found 'if' (and 2 more errors)
// if length(violatingResources) is 0 {
 length(violatingResources) is 0 

}
# Rule to restrict instance types
instance_type_allowed = rule {
    all ec2_instances as _, instance {
        instance.change.after.instance_type in allowed_types
    }
}

# Main rule that requires other rules to be true
main = rule {
//    (instance_type_allowed and mandatory_instance_tags2) else true 
    (mandatory_instance_tags2) else true 
}

